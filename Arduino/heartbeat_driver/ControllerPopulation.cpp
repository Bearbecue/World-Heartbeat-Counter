//----------------------------------------------------------------------------

#include "ControllerPopulation.h"
#include <avr/pgmspace.h>

//----------------------------------------------------------------------------

struct  SPopulationRecord
{
  int32_t date;
  int64_t population;
};

//----------------------------------------------------------------------------

static const SPopulationRecord	kPopulationRecord[] PROGMEM =
{
  // Estimation of initial homo-sapiens fork :D
  // TODO: This should actually dip
  { -100000,         1ULL },  // Birth of initial mutant with the homo sapiens seed
  { -100000+14,      1ULL },  // started banging between 14 & 15 and spread the genes !
  { -100000+15,      2ULL },
  { -100000+16,      3ULL },
  { -100000+18,      3ULL },
  { -100000+19,      5ULL },  // Died at 19 eaten by a mountain lion or something
  { -100000+23,      4ULL },  // Another offspring died squished by a mammoth
  { -100000+14+15,   5ULL },  // First offspring started banging at 15
  { -100000+14+16,  10ULL },  // banged quite a lot.
  { -100000+14+23,  24ULL },  // Shit is getting out of hand
  { -100000+14+24,  21ULL },
  { -99900,        169ULL },  // Crap
  { -99800,        542ULL },  // Who wouldve thought the earth will get fucked 100 000 years down the line?
  { -99600,       5673ULL },
  { -99000,      41701ULL },

  // Data from https://ourworldindata.org/grapher/population
  { -10000,    4432180ULL },
	{ -9000,	   5616908ULL },
	{ -8000,	   7242806ULL },
	{ -7000,	   9577828ULL },
	{ -6000,	  13201749ULL },
	{ -5000,	  19075681ULL },
	{ -4000,	  28774581ULL },
	{ -3000,	  44487076ULL },
	{ -2000,	  72585991ULL },
	{ -1000,	 110419442ULL },
	{ 0,		   232123684ULL },
	{ 100,		 236904109ULL },
	{ 200,		 240611492ULL },
	{ 300,		 227549778ULL },
	{ 400,		 241539566ULL },
	{ 500,		 253237239ULL },
	{ 600,		 271478618ULL },
	{ 700,		 278185264ULL },
	{ 800,		 285713765ULL },
	{ 900,		 310967646ULL },
	{ 1000,		 323407502ULL },
	{ 1100,		 397923741ULL },
	{ 1200,		 444750711ULL },
	{ 1300,		 456389012ULL },
	{ 1400,		 442480691ULL },
	{ 1500,		 503240510ULL },
	{ 1600,		 515751788ULL },
	{ 1700,		 591721802ULL },
	{ 1710,		 613189682ULL },
	{ 1720,		 642718358ULL },
	{ 1730,		 664734880ULL },
	{ 1740,		 695346984ULL },
	{ 1750,		 745664445ULL },
	{ 1760,		 779892196ULL },
	{ 1770,		 818828252ULL },
	{ 1780,		 891049054ULL },
	{ 1790,		 931578091ULL },
	{ 1800,		 984741151ULL },
	{ 1801,		 987628322ULL },
	{ 1802,		 991098738ULL },
	{ 1803,		 994610260ULL },
	{ 1804,		 998163240ULL },
	{ 1805,		1001758044ULL },
	{ 1806,		1005395067ULL },
	{ 1807,		1009074742ULL },
	{ 1808,		1012797513ULL },
	{ 1809,		1016563866ULL },
	{ 1810,		1022630197ULL },
	{ 1811,		1027487469ULL },
	{ 1812,		1033631136ULL },
	{ 1813,		1040443689ULL },
	{ 1814,		1047427292ULL },
	{ 1815,		1054586106ULL },
	{ 1816,		1061924513ULL },
	{ 1817,		1069447070ULL },
	{ 1818,		1077158552ULL },
	{ 1819,		1084757875ULL },
	{ 1820,		1092947422ULL },
	{ 1821,		1099331577ULL },
	{ 1822,		1106253783ULL },
	{ 1823,		1113514792ULL },
	{ 1824,		1120876169ULL },
	{ 1825,		1128342960ULL },
	{ 1826,		1135961188ULL },
	{ 1827,		1143684846ULL },
	{ 1828,		1151515422ULL },
	{ 1829,		1158898384ULL },
	{ 1830,		1166619859ULL },
	{ 1831,		1172266726ULL },
	{ 1832,		1178216298ULL },
	{ 1833,		1183674995ULL },
	{ 1834,		1189194865ULL },
	{ 1835,		1194777021ULL },
	{ 1836,		1200422586ULL },
	{ 1837,		1206132721ULL },
	{ 1838,		1211908617ULL },
	{ 1839,		1217612799ULL },
	{ 1840,		1224118692ULL },
	{ 1841,		1228821489ULL },
	{ 1842,		1234333753ULL },
	{ 1843,		1239786237ULL },
	{ 1844,		1245319917ULL },
	{ 1845,		1250936428ULL },
	{ 1846,		1256637463ULL },
	{ 1847,		1262424720ULL },
	{ 1848,		1268300005ULL },
	{ 1849,		1273394934ULL },
	{ 1850,		1278698170ULL },
	{ 1851,		1281044111ULL },
	{ 1852,		1283605123ULL },
	{ 1853,		1285405357ULL },
	{ 1854,		1287317863ULL },
	{ 1855,		1289344086ULL },
	{ 1856,		1291485555ULL },
	{ 1857,		1293743896ULL },
	{ 1858,		1296120810ULL },
	{ 1859,		1298874784ULL },
	{ 1860,		1303155263ULL },
	{ 1861,		1305490771ULL },
	{ 1862,		1309347024ULL },
	{ 1863,		1313556287ULL },
	{ 1864,		1317850567ULL },
	{ 1865,		1322223328ULL },
	{ 1866,		1326674072ULL },
	{ 1867,		1331210602ULL },
	{ 1868,		1335831902ULL },
	{ 1869,		1341040002ULL },
	{ 1870,		1348154272ULL },
	{ 1871,		1353185947ULL },
	{ 1872,		1360191149ULL },
	{ 1873,		1367778454ULL },
	{ 1874,		1375441175ULL },
	{ 1875,		1383207445ULL },
	{ 1876,		1391057502ULL },
	{ 1877,		1398962396ULL },
	{ 1878,		1406939006ULL },
	{ 1879,		1415456507ULL },
	{ 1880,		1425998653ULL },
	{ 1881,		1434253944ULL },
	{ 1882,		1444559322ULL },
	{ 1883,		1455464560ULL },
	{ 1884,		1466507494ULL },
	{ 1885,		1477744363ULL },
	{ 1886,		1489095893ULL },
	{ 1887,		1500609770ULL },
	{ 1888,		1512259811ULL },
	{ 1889,		1523683199ULL },
	{ 1890,		1536461987ULL },
	{ 1891,		1545852788ULL },
	{ 1892,		1556562451ULL },
	{ 1893,		1567026235ULL },
	{ 1894,		1577633469ULL },
	{ 1895,		1588397643ULL },
	{ 1896,		1599255683ULL },
	{ 1897,		1610265238ULL },
	{ 1898,		1621405678ULL },
	{ 1899,		1633219852ULL },
	{ 1900,		1647405022ULL },
	{ 1901,		1658785643ULL },
	{ 1902,		1672564382ULL },
	{ 1903,		1687012805ULL },
	{ 1904,		1701647404ULL },
	{ 1905,		1716473051ULL },
	{ 1906,		1731494784ULL },
	{ 1907,		1746736854ULL },
	{ 1908,		1762200207ULL },
	{ 1909,		1777067748ULL },
	{ 1910,		1793323592ULL },
	{ 1911,		1804920684ULL },
	{ 1912,		1817990952ULL },
	{ 1913,		1830461187ULL },
	{ 1914,		1843131589ULL },
	{ 1915,		1855949027ULL },
	{ 1916,		1868851504ULL },
	{ 1917,		1881853176ULL },
	{ 1918,		1895037042ULL },
	{ 1919,		1909044309ULL },
	{ 1920,		1926217425ULL },
	{ 1921,		1939587826ULL },
	{ 1922,		1955971631ULL },
	{ 1923,		1973057174ULL },
	{ 1924,		1990416385ULL },
	{ 1925,		2008052088ULL },
	{ 1926,		2025945381ULL },
	{ 1927,		2044097070ULL },
	{ 1928,		2062543972ULL },
	{ 1929,		2081683468ULL },
	{ 1930,		2104067378ULL },
	{ 1931,		2122176586ULL },
	{ 1932,		2143517525ULL },
	{ 1933,		2165540428ULL },
	{ 1934,		2187836793ULL },
	{ 1935,		2210412972ULL },
	{ 1936,		2233367401ULL },
	{ 1937,		2256671866ULL },
	{ 1938,		2280342907ULL },
	{ 1939,		2303096438ULL },
	{ 1940,		2327357739ULL },
	{ 1941,		2344788534ULL },
	{ 1942,		2363887111ULL },
	{ 1943,		2381758939ULL },
	{ 1944,		2399659920ULL },
	{ 1945,		2417413700ULL },
	{ 1946,		2435048602ULL },
	{ 1947,		2454045831ULL },
	{ 1948,		2474648090ULL },
	{ 1949,		2500821769ULL },
	{ 1950,		2536605808ULL },
	{ 1951,		2584034223ULL },
	{ 1952,		2630861688ULL },
	{ 1953,		2677609059ULL },
	{ 1954,		2724846751ULL },
	{ 1955,		2773019915ULL },
	{ 1956,		2822443253ULL },
	{ 1957,		2873306055ULL },
	{ 1958,		2925686678ULL },
	{ 1959,		2979576143ULL },
	{ 1960,		3035160180ULL },
	{ 1961,		3091843506ULL },
	{ 1962,		3150420759ULL },
	{ 1963,		3211000941ULL },
	{ 1964,		3273978271ULL },
	{ 1965,		3339583509ULL },
	{ 1966,		3407922630ULL },
	{ 1967,		3478770102ULL },
	{ 1968,		3551599432ULL },
	{ 1969,		3625680964ULL },
	{ 1970,		3700685676ULL },
	{ 1971,		3775760030ULL },
	{ 1972,		3851650585ULL },
	{ 1973,		3927780518ULL },
	{ 1974,		4003794178ULL },
	{ 1975,		4079480473ULL },
	{ 1976,		4154666824ULL },
	{ 1977,		4229505917ULL },
	{ 1978,		4304533597ULL },
	{ 1979,		4380506180ULL },
	{ 1980,		4458274952ULL },
	{ 1981,		4536996616ULL },
	{ 1982,		4617386524ULL },
	{ 1983,		4699569184ULL },
	{ 1984,		4784011512ULL },
	{ 1985,		4870921665ULL },
	{ 1986,		4960567998ULL },
	{ 1987,		5052521994ULL },
	{ 1988,		5145425992ULL },
	{ 1989,		5237441433ULL },
	{ 1990,		5327529078ULL },
	{ 1991,		5414289382ULL },
	{ 1992,		5498919891ULL },
	{ 1993,		5581597596ULL },
	{ 1994,		5663150426ULL },
	{ 1995,		5744212929ULL },
	{ 1996,		5824891927ULL },
	{ 1997,		5905045647ULL },
	{ 1998,		5984794072ULL },
	{ 1999,		6064239030ULL },
	{ 2000,		6143776621ULL },
	{ 2001,		6222912459ULL },
	{ 2002,		6302062210ULL },
	{ 2003,		6381477292ULL },
	{ 2004,		6461454653ULL },
	{ 2005,		6542205330ULL },
	{ 2006,		6623819401ULL },
	{ 2007,		6706251239ULL },
	{ 2008,		6789396380ULL },
	{ 2009,		6873077808ULL },
	{ 2010,		6957137521ULL },
	{ 2011,		7041509491ULL },
	{ 2012,		7126144677ULL },
	{ 2013,		7210900157ULL },
	{ 2014,		7295610265ULL },
	{ 2015,		7380117870ULL },
	{ 2016,		7464344232ULL },
	{ 2017,		7548182589ULL },
	{ 2018,		7631091110ULL },
	{ 2019,		7713468203ULL },
	{ 2020,		7794798725ULL },
	{ 2021,		7874965730ULL },
  { 2022,   7901037895ULL },

  // Predictions
  { 2025,   8184000000ULL },
  { 2030,   8549000000ULL },
  { 2035,   8888000000ULL },
  { 2040,   9199000000ULL },
  { 2045,   9482000000ULL },
  { 2050,   9735000000ULL },
  { 2055,   9958000000ULL },
  { 2060,  10152000000ULL },
  { 2065,  10318000000ULL },
  { 2070,  10459000000ULL },
  { 2075,  10577000000ULL },
  { 2080,  10674000000ULL },
  { 2085,  10750000000ULL },
  { 2090,  10810000000ULL },
  { 2095,  10852000000ULL },
  { 2100,  10875000000ULL },
};
const int kPopulationRecordSize = sizeof(kPopulationRecord) / sizeof(kPopulationRecord[0]);


//----------------------------------------------------------------------------

uint64_t  _pgm_read_qword_near(void *ptr)
{
  uint32_t  pop0 = pgm_read_dword_near(ptr + 0);
  uint32_t  pop1 = pgm_read_dword_near(ptr + sizeof(int32_t));
  return (uint64_t(pop1) << 32) | pop0;
}

//----------------------------------------------------------------------------

int64_t _GetPopulationAtDate(int32_t date)
{
  for (int i = 0; i < kPopulationRecordSize; i++)
  {
    const int32_t  date1 = pgm_read_dword_near(&kPopulationRecord[i].date);
    if (date1 >= date)
    {
      if (i == 0)
        return _pgm_read_qword_near(&kPopulationRecord[0].population);

      int id0 = i - 1;
      int id1 = i;
      const int32_t   date0 = pgm_read_dword_near(&kPopulationRecord[id0].date);
      const int64_t   pop0 = _pgm_read_qword_near(&kPopulationRecord[id0].population);
      const int64_t   pop1 = _pgm_read_qword_near(&kPopulationRecord[id1].population);

      float t = (date - date0) / float(date1 - date0);
      return pop0 + int64_t((pop1 - pop0) * t);
    }
  }

  // Not found, we're in the future, use extrapolation ?
  return 11000000000ULL;
}

//----------------------------------------------------------------------------

PopulationController::PopulationController()
: m_Population(0)
{
}

//----------------------------------------------------------------------------

void  PopulationController::Setup()
{
}

//----------------------------------------------------------------------------

void  PopulationController::SetYear(int32_t year)
{
  m_Population = _GetPopulationAtDate(year);
}

//----------------------------------------------------------------------------

void  _PopulationDisplay(LedControl &segDisp, int dispOffset, int64_t value)
{
  int kMaxDigits = 12;
  int digitID = 0;
  bool  dot = false;
  while (value != 0 && digitID < kMaxDigits)
  {
    byte  digit = value % 10;
    value /= 10;
    int   did = digitID++;
    segDisp.setDigit(dispOffset + (did / 8), did % 8, digit, dot);
    dot = ((did + 1) % 3) == 0;
  }

  if (digitID == 0)
    segDisp.setRawDigit(dispOffset * 8 + digitID++, 0, false);

  for (int i = digitID; i < kMaxDigits; i++)
    segDisp.setRawChar((dispOffset + (i / 8)) * 8 + (i % 8), ' ', false);
}

//----------------------------------------------------------------------------

void  PopulationController::Print(LedControl &segDisp, int offset)
{
  _PopulationDisplay(segDisp, offset, m_Population);
}

//----------------------------------------------------------------------------
